(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{541:function(v,_,t){"use strict";t.r(_);var a=t(6),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[v._v("大前端其实分为很多种")]),v._v(" "),t("ul",[t("li",[v._v("移动应用开发的前端")]),v._v(" "),t("li",[v._v("web前端")])]),v._v(" "),t("h2",{attrs:{id:"q-a-什么是前端工程化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q-a-什么是前端工程化"}},[v._v("#")]),v._v(" Q&A：什么是前端工程化？")]),v._v(" "),t("p",[v._v("在前端开发中会不会涉及到业务？在详细一点，就是前端工程师到底需不需要了解服务端的业务逻辑，再或者说，要不要将一部分服务端的业务逻辑放到前端来实现。这个问题其实没有标准的答案，实际上应该属于工程协作问题，就是谁该干什么的问题。")]),v._v(" "),t("p",[v._v("最早的前端开发就是实现页面，顶多再写写JS让页面可以有交互的特效。"),t("strong",[v._v("属于前后端未分离的时代")])]),v._v(" "),t("p",[v._v("但是随着需求的增加，我们不仅要做Web应用，还要做App、小程序以及各种端。"),t("strong",[v._v("前后端分离的时代开始")]),v._v("，在这种需求日增的情况下，必须得考虑一种新的方式，优化前端的开发工作，例如，解决代码冗余，项目可维护性，提升版本迭代速度等等一系列问题。前端工程化的概念也就是在这种情况下被提出。")]),v._v(" "),t("p",[v._v("前端工程化的目标就是解放生产力、提高生产效率。通过制定一系列的规范，借助工具和框架解决前端开发以及前后端协作过程中的痛点和难度问题。")]),v._v(" "),t("h3",{attrs:{id:"q-a-工程化表现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q-a-工程化表现"}},[v._v("#")]),v._v(" Q&A：工程化表现？")]),v._v(" "),t("p",[v._v("一切以提高效率、降低成本、质量保证为目的的手段都是工程化。")]),v._v(" "),t("ul",[t("li",[v._v("创建：脚手架")]),v._v(" "),t("li",[v._v("编码：代码格式化、编码效率")]),v._v(" "),t("li",[v._v("预览：热更新、Mock、Source Map")]),v._v(" "),t("li",[v._v("代码提交：项目整体检查")]),v._v(" "),t("li",[v._v("部署：自动发布")])]),v._v(" "),t("blockquote",[t("p",[v._v("⚠️ 工程化不是某个工具，工具化只是实现工程化的方式，如vue-cli。node对前端工程化起了非常大的作用。")])]),v._v(" "),t("p",[v._v("首先前端工程化是把软件工程相关的方法和思想应用到前端开发中。\n**狭义上的理解：**将开发阶段的代码发布到生产环境，包括：构建、分支管理、自动化测试、部署\n**广义上的理解：**前端工程化应该包含从编码开始到发布、运行和维护阶段。")]),v._v(" "),t("h3",{attrs:{id:"前端工程化的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端工程化的特点"}},[v._v("#")]),v._v(" 前端工程化的特点")]),v._v(" "),t("p",[v._v("前端工程化可以分成四个方面来说，分别为模块化、组件化、规范化和自动化。")]),v._v(" "),t("h4",{attrs:{id:"模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[v._v("#")]),v._v(" 模块化")]),v._v(" "),t("p",[v._v("模块化是指一个文件拆分成多个相互依赖的文件，最后进行统一的打包和加载，这样能够很好的保证高效的多人协作。其中包含：")]),v._v(" "),t("ul",[t("li",[v._v("JS模块化：CommonJS、AMD、CMD以及ES6 Module。")]),v._v(" "),t("li",[v._v("CSS模块化：Sass、Less、Stylus、BEM、CSS Module等。其中预处理器和BEM都会有的一个问题就是样式覆盖。而CSS Module则是通过JS来管理依赖，最大化的结合了JS模块化和CSS生态，比如Vue中的style scoped。")]),v._v(" "),t("li",[v._v("资源模块化：任何资源都能以模块的形式进行加载，目前大部分项目中的文件、CSS、图片等都能直接通过JS做统一的依赖关系处理。")])]),v._v(" "),t("h4",{attrs:{id:"组件化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[v._v("#")]),v._v(" 组件化")]),v._v(" "),t("p",[v._v("不同于模块化，模块化是对文件、对代码和资源拆分，而组件化则是对UI层面的拆分。")]),v._v(" "),t("p",[v._v("通常，我们会需要对页面进行拆分，将其拆分成一个一个的零件，然后分别去实现这一个个零件，最后再进行组装。在我们的实际业务开发中，对于组件的拆分我们需要做不同程度的考量，其中主要包括细粒度和通用性这两块的考虑。对于业务组件，你更多需要考量的是针对你负责业务线的一个适用度，即你设计的业务组件是否成为你当前业务的“通用”组件。")]),v._v(" "),t("h4",{attrs:{id:"规范化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#规范化"}},[v._v("#")]),v._v(" 规范化")]),v._v(" "),t("p",[v._v("一些好的规范能很好的帮助我们对项目进行良好的开发管理。规范化是指在工程开发初期以及开发期间制定的系列规范，其中又包含了")]),v._v(" "),t("ul",[t("li",[v._v("项目目录结构")]),v._v(" "),t("li",[v._v("编码规范：对于编码这块的约束，一般会采用一些强制措施，比如ESLint、StylusLint等。")]),v._v(" "),t("li",[v._v("联调规范")]),v._v(" "),t("li",[v._v("文件命名规范")]),v._v(" "),t("li",[v._v("样式管理规范：目前流行的样式管理有BEM、Sass、Less、Stylus、CSS Module等方式。")]),v._v(" "),t("li",[v._v("git flow工作流：其中包含分支命名规范、代码合并规范等")]),v._v(" "),t("li",[v._v("定期code review...等等")])]),v._v(" "),t("h4",{attrs:{id:"自动化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动化"}},[v._v("#")]),v._v(" 自动化")]),v._v(" "),t("p",[v._v("从最早先的grunt、gulp等，再到目前的webpack、parcel。这些自动化工具在自动化合并、构建、打包都能为我们节省很多工作。而这些只是前端自动化其中的一部分，前端自动化还包含了持续集成、自动化测试等方方面面。")])])}),[],!1,null,null,null);_.default=s.exports}}]);